"""
Django settings for SecFileSharingApp project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from django.utils.translation import gettext_lazy as _
from django.contrib.messages import constants as messages
import os
import environ
import sys
from datetime import timedelta
# importamos IsAuthenticated para restringir el acceso a las vistas
from rest_framework.permissions import IsAuthenticated
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Inicializa el entorno
env = environ.Env(
    DEBUG=(bool, False)
)
# Leer el archivo .env
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Ruta a la carpeta segura para almacenar la clave privada
PRIVATE_KEY_FOLDER = os.path.join(BASE_DIR, 'private_keys')
# Ruta a la carpeta segura para almacenar la clave pública
ADMIN_PRIVATE_KEY_PASSPHRASE = env('ADMIN_PRIVATE_KEY_PASSPHRASE', default='')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure$') # Cambia esto en producción

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}", file=sys.stdout)
# Definimos la ruta de inicio de sesión
LOGIN_URL = 'login'

# Definimos la ruta de inicio
LOGIN_REDIRECT_URL = 'dashboard'

# Definimos la ruta de cierre de sesión
LOGOUT_REDIRECT_URL = 'logout'

# Definimos el idioma por defecto
LANGUAGE_CODE = 'en-us'

# Definimos la zona horaria por defecto (Madrid)
TIME_ZONE = 'Europe/Madrid'

# Establecemos AppUser como modelo de usuario personalizado en lugar de User.
AUTH_USER_MODEL = 'SecFileSharingApp.AppUser'

# Establecemos una redirección de inicio de sesión y cierre de sesión
LOGIN_REDIRECT_URL = 'personal_page'  # O la vista que prefieras
LOGOUT_REDIRECT_URL = 'login'  # Asegúrate de tener una vista y URL configurada para esto

# Configuración de servidor de correo electrónico
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# ClamAV settings
CLAMAV_PATH = env('CLAMAV_PATH')
CLAMAV_COMMAND = env('CLAMAV_COMMAND')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'sslserver',
    'corsheaders',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt', # Esta aplicación es necesaria para JWT tokens porque proporciona la implementación de JWT (JSON Web Tokens)
    'rest_framework_simplejwt.token_blacklist', # Esta aplicación es necesaria para JWT tokens porque permite revocar tokens
    'SecFileSharingApp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'SecFileSharingApp.middlewares.EnsureCsrfCookieMiddleware',
]

CORS_ALLOW_CREDENTIALS = True
FRONTEND_URL = env('FRONTEND_URL')
CORS_ALLOWED_ORIGINS = [
    FRONTEND_URL,  # Ajusta esto al URL de tu frontend
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'content-disposition', 
    'content-type',
    'authorization',
    'x-csrftoken',
    'x-requested-with',
    'x-xsrf-token',
]

CORS_EXPOSE_HEADERS = ['Content-Disposition'] # Para permitir que el navegador acceda a la cabecera Content-Disposition

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') # Para que Django detecte correctamente las solicitudes seguras en un entorno de proxy inverso.
SECURE_SSL_REDIRECT = True 
SESSION_COOKIE_SECURE = True

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
CSRF_HTTPONLY = True
CSRF_TRUSTED_ORIGINS = [
    env('FRONTEND_URL'),  # Frontend URL
]

SECURE_HSTS_SECONDS = 3600 # Establece 1 hora como la duración de la política HSTS, lo que significa que los navegadores solo deben acceder al sitio a través de HTTPS durante 1 hora
SECURE_HSTS_INCLUDE_SUBDOMAINS = True # Incluye todos los subdominios
SECURE_HSTS_PRELOAD = True # Habilita la lista de pre-carga de HSTS.
SECURE_REFERRER_POLICY = "no-referrer-when-downgrade" # Política de seguridad que controla cómo se envía el Referer HTTP header
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY' # Evita que tu contenido se cargue en un marco
if DEBUG:
    INSTALLED_APPS += ['sslserver']


MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

ROOT_URLCONF = 'SecFileSharingApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer', # Renderizador JSON para la API. Esto es necesario para que la API pueda devolver respuestas en formato JSON
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
}

DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5 MB

SIMPLE_JWT = { 
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5), # El token de acceso expira en 5 minutos
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1), # El token de refresco expira en 1 día. El token de refresco se utiliza para obtener un nuevo token de acceso y se envía si el token de acceso ha expirado y el usuario sigue autenticado
    'ROTATE_REFRESH_TOKENS': True, # Si se establece en True, cada vez que se emite un nuevo token de acceso, se emite un nuevo token de refresco
    'BLACKLIST_AFTER_ROTATION': True, # Si se establece en True, el token de acceso anterior se añadirá a la lista negra después de emitir un nuevo token de acceso
    'UPDATE_LAST_LOGIN': False, # Si se establece en True, la última fecha de inicio de sesión del usuario se actualizará cada vez que se emita un nuevo token de acceso
    'ALGORITHM': 'HS256', # Algoritmo de cifrado
    'SIGNING_KEY': SECRET_KEY, # Clave de firma
    'VERIFYING_KEY': None, # Clave de verificación
    'AUDIENCE': None, # Audiencia: por ejemplo, el nombre de la aplicación
    'AUTH_HEADER_TYPES': ('Bearer',), # Tipos de cabecera de autenticación, Bearer es el más común en JWT
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION', # Nombre de la cabecera de autenticación
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',), # Clases de token de autenticación

    'USER_ID_FIELD': 'id', # Campo de ID del usuario
    'USER_ID_CLAIM': 'user_id', # Reclamación de ID del usuario
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule', # Regla de autenticación de usuario
    'USER_ID_FIELD': 'id', # Campo de ID del usuario
    'USER_ID_CLAIM': 'user_id', # Reclamación de ID del usuario
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule', # Regla de autenticación de usuario
    'TOKEN_TYPE_CLAIM': 'token_type', # Reclamación de tipo de token
    'JTI_CLAIM': 'jti', # Reclamación de ID de token

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp', # Reclamación de expiración de token de refresco
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Duración del token de refresco
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Duración del token de refresco

}

WSGI_APPLICATION = 'SecFileSharingApp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT', default='3306'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'SecFileSharingApp.validators.CustomPasswordValidator',
    }
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Opcionalmente, si tienes archivos estáticos fuera de las aplicaciones, añade sus rutas aquí
STATICFILES_DIRS = [
    BASE_DIR / "SecFileSharingApp/static",  # Si tienes una carpeta 'static' en el nivel de tu proyecto
]

STATIC_ROOT = BASE_DIR / "SecFileSharingApp/staticfiles"  # Para producción

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
UPLOADS_DIR = os.path.join(BASE_DIR, 'uploads')
# Configuración de los logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'django_debug.log',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
# Configuración ASGI
ASGI_APPLICATION = 'SecFileSharingApp.asgi.application'

MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}